#!/bin/bash

set -e

# Sets up the essentials before install can be used
# Includes setup that requires user interaction.
# Installs brew, system update, git

# Files to be symlinked into /usr/local/bin
declare -r BINS='
dfsetup
'

declare -r DOTFILES='
.bash_profile
.bash_aliases
.bash_prompt
.bash_extras
.gitconfig
.gitconfig-personal
.gitconfig-work
.tern-config
.config/nvim/init.vim
'

declare -r ERR_NO_SSH_FILE=10
declare -r ERR_INVALID_ARGS=3
declare -r ERR_GITHUB_GENERATE_SSH=50
declare -r ERR_GITHUB_UPLOAD_SSH=20
declare -r ERR_DOTFILE_LINK=21

function setup_system() {
  echo 'Logging in as system root...'
  sudo -v
  softwareupdate -ia
  systemsetup -setremotelogin on
  xcode-select --install 2>/dev/null
  # TODO: remap ctrl key if possible
  # TODO: battery percent
  # TODO: show bluetooth
}

function install_brew() {
  command -v brew || /usr/bin/ruby -e "$(curl -fsSL
    https://raw.githubusercontent.com/Homebrew/install/master/install)"
}

function prompt_user() {
  local input
  local response
  while true; do
    echo -n "$1: "
    read -r input
    echo -n "Is $input correct? [y/N]: "
    read -r response
    if [ -z "$response" ] || [ "$response" == "y" ]; then
      break
    fi
  done
  __="$input"
}

function prompt_user_no_confirm() {
  local input
  local response
  echo -n "$1: "
  read -r input
  __="$input"
}

function setup_github() {
  local -r ssh_key="$HOME/.ssh/id_rsa"
  github_generate_ssh_key "$ssh_key" || return $?
  github_upload_ssh_key "$ssh_key.pub" || return $?
}

function github_generate_ssh_key() {
  prompt_user 'Please enter your GitHub email address and press [Enter]'
  local -r email_address="${__}"

  local -r ssh_key="$1"
  local -r ssh_dir="$(dirname "$ssh_key")"
  local -r ssh_config="$ssh_dir/config"
  if [ ! -f "$ssh_key" ]; then
    mkdir -p "$ssh_dir"
    ssh-keygen -t rsa -b 4096 -f "$ssh_key" -C "$email_address"
    eval "$(ssh-agent -s)" &>/dev/null
    ssh-add -K "$ssh_key"

    # MacOS 10.12.2 or later only
    cat <<EOF >> "$ssh_config"
Host *
 AddKeysToAgent yes
 UseKeychain yes
 IdentityFile ${ssh_key}
EOF
  fi
}

function date_rfc() {
  date -u +%Y-%m-%dT%H:%M:%SZ
}

function github_upload_ssh_key_api() {
  local -r pub_file="$1"
  [ -z "$pub_file" ] && return $ERR_INVALID_ARGS

  prompt_user 'Please enter your Github username and press [Enter]'
  local -r username="${__}"

  # RFC 3339 timestamp
  local -r title="$(whoami)@$(hostname)_$(date_rfc)"
  local -r pub_key="$(cat "$pub_file")" || return $ERR_NO_SSH_FILE

  if ! curl --fail -u "$username" \
    --data "{\"title\":\"$title\",\"key\":\"$pub_key\"}" \
    https://api.github.com/user/keys
  then
    return $ERR_GITHUB_UPLOAD_SSH
  fi

  echo "Created SSH key on GitHub with $title"
  return 0
}

function github_upload_ssh_key() {
  local -r pub_file="$1"
  [ -z "$pub_file" ] && return $ERR_INVALID_ARGS

  if repeat_try github_upload_ssh_key_api "$pub_file"; then
    return 0
  fi

  pbcopy < "$pub_file"
  echo "Copied SSH public key from $pub_file to clipboard"

  echo "Opening GitHub Settings page..."
  echo "Please login and paste your SSH key."
  open https://github.com/settings/keys
  prompt_user_no_confirm 'Press [Enter] to continue'
  return 0
}

function repeat_try() {
  local response
  while :
  do
    eval "$@" && break
    echo -n 'Try again? [y/N]: '
    read -r response
    if [ "$response" == "N" ]; then
      return 1
    fi
  done
  return 0
}

function install_git() {
  brew install git
}

function setup() {
  for cmd in "$@"; do
    eval "$cmd"
    echo ''
  done
}

#
# symlink_dotfile
#
# Creates a symlink from oldfile -> newfile
#
# If oldfile already exists, then it is backed up to 
# (dirname backup_dir/newfile) if backup_dir provided
#
# please use relative paths
#
function symlink() {
  local -r oldfile="$1"
  local -r newfile="$2"
  local -r backup_root="$3"
  print_verbose "Creating symlink $oldfile -> $newfile"
  if [ -h "$oldfile" ]; then
    # Remove old symlink
    rm "$oldfile"
  fi
  if [ -e "$oldfile" ]; then
    # Only backup if a backup directory was provided
    if [ -z "$backup_root" ]; then
      print_error "Unable to symlink. File $oldfile already exists."
      return 1
    fi
    local -r backup_dir="$(dirname "$backup_root/$dotfile")"
    print_warning "File already exists. Backing up $oldfile -> $backup_dir/$oldfile"
    if [ ! -d "$backup_dir" ]; then
      print_debug "Backup directory DNE. Creating $backup_dir ..."
      mkdir -p "$backup_dir"
    fi
    mv "$oldfile" "$backup_dir"
  fi

  # Check to make sure the parent directories for newfile exist before linking
  mkdir -p "$(dirname "$newfile")"
  ln -s "$newfile" "$oldfile"
}

# TODO: document and fix relative symlinks
function setup_dotfiles() {
  pushd_debug "$DOTFILE_PATH"
  print_info 'Setting up dotfiles...'
  local -r backup_dir="${HOME}/.dotfiles_backup/$(date_rfc)"

  local dotfile
  while read -r dotfile; do
    [ -z "$dotfile" ] && continue

    local oldfile="$HOME/$dotfile"
    local newfile="$DOTFILE_PATH/$dotfile"
    symlink "$oldfile" "$newfile" "$backup_dir"
  done <<< "$DOTFILES"

  print_info 'Finished setting up dotfiles!'
  popd_debug
}

function pushd_debug() {
  local -r path="$1"
  if ! pushd "$path" >/dev/null; then
    print_error "Unable to switch CWD to $path"
  fi
  print_debug "Switched to CWD to $path"
}

function popd_debug() {
  if ! local -r path="$(popd)"; then
    print_error "Unable to switch CWD"
  fi
  print_debug "Switched to CWD to $path"
}

function setup_bin() {
  pushd_debug "$DOTFILE_PATH"
  print_info 'Setting up binaries...'

  local bin
  local from
  local to
  while read -r bin; do
    [ -z "$bin" ] && continue

    from="/usr/local/bin/$(basename "$bin")"
    to="$(abs_dirname "$bin")/$(basename "$bin")"
    symlink "$from" "$to"
  done <<< "$BINS"

  print_info 'Finished linking binaries to /usr/local/bin'
  popd_debug
}

function main() {
  if [ -z "$DOTFILE_PATH" ]; then
    pushd "$(dirname "$0")" &>/dev/null
    DOTFILE_PATH=$(pwd -P)
    export DOTFILE_PATH
    echo "export DOTFILE_PATH=$DOTFILE_PATH" >> "${DOTFILE_PATH}/.bash_extras"
    popd &>/dev/null
  fi
  cd "$DOTFILE_PATH"
  source util/dirname.sh
  source util/print.sh
  cd - >/dev/null
  print_debug "DOTFILE_PATH=$DOTFILE_PATH"

  # TODO: setup vim, nvim, 
  setup \
    setup_dotfiles \
    setup_bin

    #setup_github \
    #setup_system \

  # Source bash profile to reflect changes, e.g. GOPATH is now set up
  # TODO: fix bash_profile to not bork on missing commands
  source "$HOME/.bash_profile"

  #TODO: call dfsetup with all packages
  ./dfsetup langs/golang langs/python langs/javascript apps/iterm2 neovim

  # Source bash profile to reflect changes post install.
  source "$HOME/.bash_profile"
}

function teardown() {
  echo 'User cancelled.' 1>&2
}

function finish() {
  local -i rv=$?
  echo ''
  if [ $rv -eq 0 ]; then
    echo 'Finished installing!'
    return 0
  fi
  echo -n "$0:"
  case "$rv" in
    $ERR_NO_SSH_FILE)
      echo 'Unable to find ssh key file.' 1>&2
      ;;
    $ERR_INVALID_ARGS)
      echo 'Invalid args' 1>&2
      ;;
    $ERR_GITHUB_UPLOAD_SSH)
      echo 'Unable to upload SSH key to GitHub.' 1>&2
      ;;
    $ERR_DOTFILE_LINK)
      echo 'Unable to create dotfile symlink.' 1>&2
      ;;
    $ERR_GITHUB_GENERATE_SSH)
      echo 'Unable to generate SSH key for GitHub.' 1>&2
      ;;
    *)
      echo 'Unknown error.' 1>&2
      ;;
  esac
  return $rv
}

trap teardown SIGTERM
trap finish EXIT
main "$@"
