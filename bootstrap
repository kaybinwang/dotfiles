#!/bin/bash

# Sets up the essentials before install can be used

declare -r ERR_NO_SSH_FILE=10
declare -r ERR_INVALID_ARGS=3
declare -r ERR_GITHUB_GENERATE_SSH=50
declare -r ERR_GITHUB_UPLOAD_SSH=20

function setup_system() {
  softwareupdate -ia
  systemsetup -setremotelogin on
  xcode-select --install 2> /dev/null
  # TODO: remap ctrl key if possible
}

function install_brew() {
  /usr/bin/ruby -e "$(curl \
    -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
}

function prompt_user() {
  local input
  local response
  while true; do
    echo -n "$1: "
    read -r input
    echo -n "Is $input correct? [y/N]: "
    read -r response
    if [ -z "$response" ] || [ "$response" == "y" ]; then
      break
    fi
  done
  __="$input"
}

function prompt_user_no_confirm() {
  local input
  local response
  echo -n "$1: "
  read -r input
  __="$input"
}

function github_config() {
  local -r ssh_key="$HOME/.ssh/id_rsa"
  github_generate_ssh_key "$ssh_key" || return $ERR_GITHUB_GENERATE_SSH
  github_upload_ssh_key "$ssh_key.pub" || return $ERR_GITHUB_UPLOAD_SSH
}

function github_generate_ssh_key() {
  prompt_user 'Please enter your GitHub email address and press [Enter]'
  local -r email_address="${__}"

  local -r ssh_key="$1"
  local -r ssh_dir="$(dirname "$ssh_key")"
  local -r ssh_config="$ssh_dir/config"
  mkdir -p "$ssh_dir"
  if [ ! -f "$ssh_key" ]; then
    ssh-keygen -t rsa -b 4096 -f "$ssh_key" -C "$email_address"
    eval "$(ssh-agent -s)" &>/dev/null
    ssh-add -K "$ssh_key"

    # MacOS 10.12.2 or later only
    cat <<EOF >> "$ssh_config"
Host *
 AddKeysToAgent yes
 UseKeychain yes
 IdentityFile ${ssh_key}
EOF
  fi
  # TODO: return value or echo
}

function github_upload_ssh_key_api() {
  local -r pub_file="$1"
  [ -z "$pub_file" ] && return $ERR_INVALID_ARGS

  prompt_user 'Please enter your Github username and press [Enter]'
  local -r username="${__}"

  # RFC 3339 timestamp
  local -r title="$(whoami)@$(hostname)_$(date -u +%Y-%m-%dT%H:%M:%SZ)"
  local -r pub_key="$(cat "$pub_file")" || return $ERR_NO_SSH_FILE

  # TODO: curl returning with error
  if curl --fail -u "$username" \
    --data "{\"title\":\"$title\",\"key\":\"$pub_key\"}" \
    https://api.github.com/user/keys
  then
    echo "Created SSH key on GitHub with $title"
    return 0
  fi
}

function github_upload_ssh_key() {
  local -r pub_file="$1"
  [ -z "$pub_file" ] && return $ERR_INVALID_ARGS

  if repeat_try github_upload_ssh_key_api "$pub_file"; then
    return 0
  fi

  pbcopy < "$pub_file"
  echo "Copied SSH public key from $pub_file to clipboard"

  echo "Opening GitHub Settings page..."
  echo "Please login and paste your SSH key."
  open https://github.com/settings/keys
  prompt_user_no_confirm 'Press [Enter] to continue'
  return 0
}

function repeat_try() {
  local response
  while :
  do
    eval "$@" && break
    echo -n 'Try again? [y/N]: '
    read -r response
    if [ "$response" == "N" ]; then
      return 1
    fi
  done
  return 0
}

function install_git() {
  brew install git
}

function install() {
  for cmd in "$@"; do
    if ! eval "$cmd"; then
      return $?
    fi
  done
  return 0
}

function main() {
  if [ -z "$DOTFILE_PATH" ]; then
    pushd "$(dirname "$0")" &>/dev/null
    DOTFILE_PATH=$(pwd -P)
    export DOTFILE_PATH
    echo "export DOTFILE_PATH=$DOTFILE_PATH" >> "${DOTFILE_PATH}/.bash_extras"
    popd &>/dev/null
  fi

  install \
    github_config \
    setup_system \
    install_brew \
    install_git

  return $?
}

function teardown() {
  echo 'User cancelled.' 1>&2
}

function finish() {
  local -i rv=$?
  echo ''
  if [ $rv -eq 0 ]; then
    echo 'Finished installing!'
    return 0
  fi
  echo -n "$0:"
  case "$rv" in
    $ERR_NO_SSH_FILE)
      echo 'Unable to find ssh key file.' 1>&2
      ;;
    $ERR_INVALID_ARGS)
      echo 'Invalid args' 1>&2
      ;;
    $ERR_GITHUB_UPLOAD_SSH)
      echo 'Unable to upload SSH key to GitHub.' 1>&2
      ;;
    $ERR_GITHUB_GENERATE_SSH)
      echo 'Unable to generate SSH key for GitHub.' 1>&2
      ;;
    *)
      echo 'Unknown error.' 1>&2
      ;;
  esac
  return $rv
}

trap teardown SIGTERM
trap finish EXIT
main "$@"
