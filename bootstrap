#!/bin/bash

# Sets up the essentials before install can be used

declare -r ERR_NO_SSH_FILE=1

function setup_system() {
  softwareupdate -ia
  systemsetup -setremotelogin on
  xcode-select --install 2> /dev/null
  # TODO: remap ctrl key if possible
}

function install_brew() {
  /usr/bin/ruby -e "$(curl \
    -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
}

function prompt_user() {
  local input
  local response
  while true; do
    echo -n "$1: "
    read -r input
    echo -n "Is $input correct? [y/N]: "
    read -r response
    if [ -z "$response" ] || [ "$response" == "y" ]; then
      break
    fi
  done
  __="$input"
}

function prompt_user_no_confirm() {
  local input
  local response
  echo -n "$1: "
  read -r input
  __="$input"
}

function github_config() {
  local -r ssh_key="$HOME/.ssh/id_rsa"
  github_generate_ssh_key "$ssh_key"
  github_upload_ssh_key "$ssh_key.pub"
}

function github_generate_ssh_key() {
  prompt_user 'Please enter your GitHub email address and press [Enter]'
  local -r email_address="${__}"

  local -r ssh_key="$1"
  local -r ssh_dir="$(dirname "$ssh_key")"
  local -r ssh_config="$ssh_dir/config"
  mkdir -p "$ssh_dir"
  if [ ! -f "$ssh_key" ]; then
    ssh-keygen -t rsa -b 4096 -f "$ssh_key" -C "$email_address"
    eval "$(ssh-agent -s)" &>/dev/null
    ssh-add -K "$ssh_key"

    # MacOS 10.12.2 or later only
    cat <<EOF >> "$ssh_config"
Host *
 AddKeysToAgent yes
 UseKeychain yes
 IdentityFile ${ssh_key}
EOF
  fi
  # TODO: return value or echo
}

function github_upload_ssh_key() {
  prompt_user 'Please enter your Github username and press [Enter]'
  local -r username="${__}"

  # RFC 3339 timestamp
  local -r title="$(whoami)@$(hostname)_$(date -u +%Y-%m-%dT%H:%M:%SZ)"
  local -r public_key="$(cat "$1")"

  if [ "$?" -ne 0 ]; then
    return $ERR_NO_SSH_FILE
  fi

  curl -u "$username" \
    --data "{\"title\":\"$title\",\"key\":\"$public_key\"}" \
    https://api.github.com/user/keys

  # TODO: curl returns 0 with error always
  if [ "$?" -ne 0 ]; then
    echo "Created SSH key on GitHub with $title"
    return 0
  fi

  pbcopy < "$ssh_key.pub"
  echo "Copied SSH public key from $ssh_key.pub to clipboard"

  echo "Opening GitHub Settings page..."
  echo "Please login and paste your SSH key."
  open https://github.com/settings/keys
  prompt_user_no_confirm 'Press [Enter] to continue.'
  return $?
}

function install_git() {
  brew install git
}

function install() {
  for cmd in "$@"; do
    if ! eval "$cmd"; then
      return $?
    fi
  done
  return 0
}

function main() {
  if [ -z "$DOTFILE_PATH" ]; then
    pushd "$(dirname "$0")" &>/dev/null
    DOTFILE_PATH=$(pwd -P)
    export DOTFILE_PATH
    echo "export DOTFILE_PATH=$DOTFILE_PATH" >> "${DOTFILE_PATH}/.bash_extras"
    popd &>/dev/null
  fi
  pushd "$DOTFILE_PATH" &>/dev/null

  install \
    github_config \
    setup_system \
    install_brew \
    install_git

  popd &>/dev/null
  exit 0
}

function finish() {
  local -i rv="$?"
  case "$rv" in
    $ERR_NO_SSH_FILE)
      echo 'Unable to find ssh key file.' 2>&1
      ;;
    0)
      echo 'Finished installing!'
      ;;
    *)
      echo 'Unknown error.' 2>&1
      ;;
  esac
  return $rv
}

trap EXIT finish
main "$@"
